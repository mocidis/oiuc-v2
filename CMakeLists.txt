cmake_minimum_required(VERSION 2.8.4)
#include(../cmake/mingw.cmake)
include(../cmake/darwin.cmake)
include(../cmake/utils.cmake)
project(oiuc)
project_version(1 1 0)
set(APP oiuc)

find_package(PkgConfig REQUIRED)
if(NOT ${PKG_CONFIG_FOUND}) 
    message(FATAL_ERROR "pkg-config not found!")
endif()

#    find_package(Qt4)
#    if(${Qt4_FOUND})
#        set(QT_CFLAGS ${Qt4Core_INCLUDES} ${Qt4Declarative_INCLUDES} ${Qt4Sql_INCLUDES})
#        set(QT_LIBS ${Qt4Core_LIBRARIES} ${Qt4Declarative_LIBRARIES} ${Qt4Sql_LIBRARIES})
#    else()
#        message(FATAL_ERROR "Require either Qt4 or Qt5")
#    endif()

    find_package(Qt5 COMPONENTS Core Declarative Sql)
    if(${Qt5_FOUND})
        set(QT_CFLAGS ${Qt5Core_INCLUDES} ${Qt5Declarative_INCLUDES} ${Qt5Sql_INCLUDES})
        set(QT_LIBS ${Qt5Core_LIBRARIES} ${Qt5Declarative_LIBRARIES} ${Qt5Sql_LIBRARIES})
    else()
        message(FATAL_ERROR "Require either Qt4 or Qt5")
    endif()

include_directories(include ${QT_CFLAGS})
set(CMAKE_AUTORCC TRUE)
set(SRCS)
add_component(../common SRCS "ansi-utils.c my-pjmedia-utils.c my-pjlib-utils.c")
add_component(../media-endpoint SRCS "endpoint.c")
add_component(../group-man SRCS "node.c gb-receiver.c")
add_component(../concurrent_queue SRCS "queue.c")
add_component(../object-pool SRCS "object-pool.c")
add_component(../ics SRCS "ics-command.c ics.c ics-event.c")
list(APPEND SRCS ./src/ctocpp.cpp 
                 ./src/main.cpp 
	             ./src/backend.cpp)
add_moc_classes(SRCS "OIUC Config Log Radio RadioList OIU OIUList")
gen_protos("gm gmc adv gb" SRCS)
add_executable(${APP} ${SRCS} qml.qrc)
my_find_pjproject()
my_find_json_c()
add_definitions("-D__ICS_INTEL__")
my_target_link_pjproject(${APP})
target_link_libraries(${APP} ${JSON_C_LDFLAGS})
target_link_libraries(${APP} ${QT_LIBS})
#target_link_libraries(${APP} 
#                        ${Qt5Core_LIBRARIES} 
#                        ${Qt5Declarative_LIBRARIES}
#                        ${Qt5Sql_LIBRARIES})
